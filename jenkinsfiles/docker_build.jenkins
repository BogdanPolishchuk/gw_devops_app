#!groovy
//building docker image
properties([
    disableConcurrentBuilds(),
    parameters([
//    	string(defaultValue: '8888', description: 'Enter port number in range 8100-9000', name: 'PORT', trim: false),
        string(defaultValue: 'grw1', description: 'Enter Name of Job', name: 'NJOB', trim: false),
        string(defaultValue: '2', description: 'Enter Number of Build', name: 'NBUID', trim: false)
    ])
])

pipeline {
    agent {
        label 'master'
    }
    options {
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    timestamps()
    }
    stages {
        stage("define vars") {
            steps {
                echo "======= vars ======="
//                echo "${params.PORT}"
                echo "${params.NJOB}"
                echo "${params.NBUID}"
             }
        }
        
        stage("copy artefact") {
            steps {
                echo "======= copy artefact ======="
                sh "pwd"
//                sh "ls -la /var/lib/jenkins/jobs/${params.NJOB}/builds/${params.NBUID}/archive/java_app/target/"
                sh "cp /var/lib/jenkins/jobs/${params.NJOB}/builds/${params.NBUID}/archive/java_app/target/app-ver.${params.NBUID}.jar ./Dokerfiles/app.jar"
//                sh 'cp /var/lib/jenkins/jobs/grw1/builds/2/archive/java_app/target/app-ver.2.jar ./Dokerfiles'
            }
        }
        
//        stage("update Dockerfile") {
//            steps {
//                echo "======= update Dockerfile ======="
//                dir ('Dokerfiles') {
//                    sh "pwd"
//                    sh "echo 'ADD app-ver.${params.NBUID}.jar /java_project/' >> Dockerfile"
//                    sh "echo 'CMD ["java", "-jar", "app-ver.${params.NBUID}.jar"]' >> Dockerfile"
//                   sh "echo 'CMD ["java", "-jar", "app-ver.${params.NBUID}.jar", "--server.port=${params.PORT}"]' >> Dockerfile"
//                }
                
//                sh "ls -la /var/lib/jenkins/jobs/${params.NJOB}/builds/${params.NBUID}/archive/java_app/target/"
//                sh "cp /var/lib/jenkins/jobs/${params.NJOB}/builds/${params.NBUID}/archive/java_app/target/app-ver.${params.NBUID}.jar ./Dokerfiles/"
//                sh 'cp /var/lib/jenkins/jobs/grw1/builds/2/archive/java_app/target/app-ver.2.jar ./Dokerfiles'
//            }
//        }
        
        stage("create docker image") {
            steps {
                echo "======= start building image ======="
//                sh 'cd Dockerfiles; pwd'
                dir ('Dokerfiles') {
                    sh "docker build -t application:v${params.NBUID} ."
//                    sh 'docker images'
                }
            }
        }
        
        
        stage("check repositories") {
            steps {
                sh "repo=$(aws ecr describe-repositories)"
                sh "string=$(echo $repo | jq '.repositories[0].repositoryName' | sed -e "s/^.//;s/.$//")"
                sh "echo $string"
//                $reg | jq '.repositories[0].repositoryName' | sed 's/"//g'"

                }
            }
        }
        
        
    }
}
